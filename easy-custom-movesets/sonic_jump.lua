ACT_SONIC_JUMP = allocate_mario_action(ACT_GROUP_AIRBORNE | ACT_FLAG_MOVING | ACT_FLAG_AIR | ACT_FLAG_CONTROL_JUMP_HEIGHT |
                                       ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_SHORT_HITBOX | ACT_FLAG_ATTACKING)
local jumpsound = audio_sample_load("cdjump.ogg")
--- @param m MarioState
function sonic_jump(m)
    if (m.input & INPUT_Z_PRESSED) ~= 0 then
        return set_mario_action(m, ACT_GROUND_POUND, 0);
    end

    -- fix m.vel.x and m.vel.z not updating correctly
    mario_set_forward_vel(m,m.forwardVel)
    local step = perform_air_step(m, 0)
    if step == AIR_STEP_LANDED then
        set_mario_action(m, ACT_JUMP_LAND, 0);

    elseif step == AIR_STEP_HIT_WALL then
        if m.forwardVel > 16 then
            if gServerSettings.bouncyLevelBounds == BOUNCY_LEVEL_BOUNDS_OFF or m.wall ~= nil then
                queue_rumble_data_mario(m, 5, 40);
                mario_bonk_reflection(m, 0);
                m.faceAngle.y = m.faceAngle.y + 0x8000;
            end

            if (m.wall ~= nil) then
                set_mario_action(m, ACT_AIR_HIT_WALL, 0);
            else
                if m.vel.y > 0 then
                    m.vel.y = 0
                end

            end
        else
            mario_set_forward_vel(m, 0);
        end

    elseif step == AIR_STEP_GRABBED_LEDGE then
        set_character_animation(m, CHAR_ANIM_IDLE_ON_LEDGE);
        drop_and_set_mario_action(m, ACT_LEDGE_GRAB, 0);
        
    elseif step == AIR_STEP_GRABBED_CEILING then
        set_mario_action(m, ACT_START_HANGING, 0);

    elseif step == AIR_STEP_HIT_LAVA_WALL then
        lava_boost_on_wall(m);
    end
    m.actionTimer = m.actionTimer + 1
end

hook_mario_action(ACT_SONIC_JUMP, sonic_jump)


--- @param m MarioState
--- @param stats CharacterStats
function enter_sonic_jump(m,stats)
    if not stats.sonic_jump_on then return end
    
    set_mario_action(m,ACT_SONIC_JUMP,0)

    audio_sample_play(jumpsound, m.pos, 1)
    set_character_animation(m, CHAR_ANIM_A_POSE)
    smlua_anim_util_set_animation(m.marioObj, "SONIC_BALL")

    m.vel.y = stats.sonic_jump_strength
    m.forwardVel = gPlayerSyncTable[m.playerIndex].prevForwardVel
    print(m.forwardVel)
    mario_set_forward_vel(m, math.min(m.forwardVel + stats.sonic_jump_add_forward_vel,160))
end

smlua_anim_util_register_animation('SONIC_BALL',0, 0, 0, 0, 7, {
	0x0000, 0x00BD, 0x00F2, 0x0127, 0x00F2, 0x00BD, 0x0088, 0x0053, 0x0088, 
	0xFF96, 0xFFCB, 0x0000, 0x0035, 0x006A, 0x0035, 0x0000, 0xFFCB, 0x0000, 
	0x3FFF, 0x4000, 0x4001, 0x8019, 0xC00F, 0xC010, 0xC011, 0x3FFF, 0x2000, 
	0xFFFF, 0xDFFF, 0xC000, 0xDFFF, 0x0000, 0x2000, 0x0000, 0x3FFE, 0x3FFF, 
	0x3FFE, 0xFFF5, 0xC001, 0xC000, 0xC001, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
	0x0000, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0x40A1, 0xFFFF, 0xFFFE, 0x24B2, 
	0xFFFF, 0xFFFE, 0x2910, 0xFFFE, 0x0001, 0xC170, 0x0B72, 0xF361, 0x9657, 
	0x03DF, 0xF80A, 0xCC89, 0xFD4B, 0xF1AE, 0xD6F2, 0xFFFE, 0x0001, 0xC170, 
	0xFA6C, 0x0D54, 0x965C, 0x009F, 0x04F0, 0xCF84, 0x05B7, 0x0663, 0xD414, 
	0x0000, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 
	0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xBF5E, 0x01A3, 
	0xF9BA, 0x778B, 0x0005, 0x009F, 0x48B2, 0x00C2, 0xFF36, 0xB37D, 0x0000, 
	0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0x0000, 
	0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 0xBF5E, 0xFD73, 0x05D4, 
	0x770D, 0xFF49, 0xFE2F, 0x49A6, 0xFF67, 0x01FD, 0xB25A, 
	
	},{ 
	0x0001, 0x0000, 0x0008, 0x0001, 0x0008, 0x0009, 0x0008, 0x0011, 0x0008, 
	0x0019, 0x0008, 0x0021, 0x0007, 0x0029, 0x0002, 0x0030, 0x0001, 0x0032, 
	0x0001, 0x0033, 0x0001, 0x0034, 0x0001, 0x0035, 0x0001, 0x0036, 0x0001, 
	0x0037, 0x0001, 0x0038, 0x0001, 0x0039, 0x0001, 0x003A, 0x0001, 0x003B, 
	0x0001, 0x003C, 0x0001, 0x003D, 0x0001, 0x003E, 0x0001, 0x003F, 0x0001, 
	0x0040, 0x0001, 0x0041, 0x0001, 0x0042, 0x0001, 0x0043, 0x0001, 0x0044, 
	0x0001, 0x0045, 0x0001, 0x0046, 0x0001, 0x0047, 0x0001, 0x0048, 0x0001, 
	0x0049, 0x0001, 0x004A, 0x0001, 0x004B, 0x0001, 0x004C, 0x0001, 0x004D, 
	0x0001, 0x004E, 0x0001, 0x004F, 0x0001, 0x0050, 0x0008, 0x0051, 0x0008, 
	0x0059, 0x0001, 0x0061, 0x0001, 0x0062, 0x0001, 0x0063, 0x0001, 0x0064, 
	0x0001, 0x0065, 0x0001, 0x0066, 0x0001, 0x0067, 0x0001, 0x0068, 0x0001, 
	0x0069, 0x0001, 0x006A, 0x0008, 0x006B, 0x0008, 0x0073, 0x0001, 0x007B, 
	0x0001, 0x007C, 0x0001, 0x007D, 0x0001, 0x007E, 0x0001, 0x007F, 0x0001, 
	0x0080, 0x0001, 0x0081, 0x0001, 0x0082, 0x0001, 0x0083, 0x0001, 0x0084, 
	
	
	})
